[{"categories":[""],"content":"Può uno strumento di formattazione automatica aumentare la produttività?\nLa risposta è sì.\nNel libro “The Pragmatic Programmer” si parla di entropia del codice. L’entropia è una grandezza fisica legata al disordine molecolare. Questa è forse l\u0026rsquo;unica grandezza fisica che possiamo ritrovare nel software. Più è grande il disordine, più è elevata l\u0026rsquo;entropia. Più il vostro software è entropico, più fatica farete a lavorarci giorno dopo giorno.\nPer spiegare perché, vi farò un esempio.\nQuando si scrive un if-then-else in un linguaggio come Java dove è meglio mettere le parentesi?\nPotrete dire come a), b) oppure c) oppure potrete inventare un’altra combinazione intermedia di vostro gusto.\na)\n1if (condition) { 2 // your \u0026#34;then\u0026#34; code here 3} else { 4 // your \u0026#34;else\u0026#34; code here 5} b)\n1if (condition) 2{ 3 // your \u0026#34;then\u0026#34; code here 4} 5else 6{ 7 // your \u0026#34;else\u0026#34; code here 8} c)\n1if (condition) { 2 // your \u0026#34;then\u0026#34; code here 3} 4else { 5 // your \u0026#34;else\u0026#34; code here 6} I modi di formattare il codice sono numerosissimi: dove mettere l’apertura della parentesi graffa, se usare il TAB o lo spazio per indentare, se aggiungere uno spazio dopo l’apertura di una parentesi tonda, dove porre i commenti. Anche la scrittura delle condizioni logiche può essere fatta in molti modi:\n1(a==b) oppure\n1(a == b) oppure\n1( a == b ) I have witnessed several heated discussions on which style is \u0026ldquo;better\u0026rdquo; but beyond what can come out of them, what really matters most is consistency. Why? Because, depending on how much a person may not like a certain style, after a while they will adjust to it, and the reading of the code will become automatic. The code becomes more intuitive. If the formatting of the code is inconsistent, reading the code becomes more strenuous. Fatigue increases the likelihood of making mistakes. It will take time to find these errors and more time to correct them. Ultimately, not formatting your code consistently results in a decline in productivity.\nHo assistito a varie discussioni accese su quale stile sia “meglio” ma aldilà di quello che può uscirne, quello che conta di più in realtà è la coerenza. Perché? Perché per quanto ad una persona possa non piacere un certo stile, dopo un po’ finisce per abituarcisi e quando ci ha fatto l’abitudine, la lettura del codice diventa automatica. Il codice diventa più intuitivo. Se la formattazione del codice è incoerente, la lettura del codice diviene più faticosa. Con la stanchezza aumenta la probabilità di commettere errori. Ci vorrà tempo per trovare questi errori e altro tempo per correggerli. In definitiva, non formattare il codice in maniera coerente comporta un calo della produttività.\nMantenere il codice formattato coerentemente può essere una sfida anche per un singolo sviluppatore ma in una squadra, potete essere certi che la coerenza non durerà. Gli sviluppatori lavorano quasi sempre in squadra. Per una squadra, avere una regola condivisa significa aumentare la produttività globale. Create un consenso attorno ad uno stile di formattazione del codice e se non ci riuscite, imponetelo. Anche se all’inizio incontrerete un po’ di resistenza, i vostri colleghi si abitueranno, si stancheranno meno e saranno più produttivi.\nLa coerenza e l’ordine che ne deriva sono ancora più importanti dello stile della formattazione stessa.\nSe abbiamo a disposizione uno strumento che non solo verifica che le regole siano rispettate ma in più formatta il codice automaticamente, otteniamo un secondo grande vantaggio che è quello di risparmiare tempo e stress per applicare la formattazione.\nLa definizione di uno stile di formattazione per un linguaggio con una sintassi mediamente complessa come quella di Java può richiedere decine di regole e per quanto detto sopra, è bene che tali regole siano coerenti nei diversi casi che si possono presentare.\nCosa succede se si decide di applicare delle regole di formattazione ad un progetto che è composto da parecchi file? Bisogna formattare tutti i file in un colpo solo o è meglio procedere gradualmente trattando solo qualche file alla volta?\nSe un progetto ha uno storico di qualche giorno, formattare tutti i file in un colpo solo non ha un grosso impatto sulla tracciabilità delle modifiche nel log del sistema di gestione dei sorgenti (git per esempio) ma se i file sono centinaia con più sviluppatori che lavorano e magari in modalità asincrona (come avviene solitamente su un progetto open source) applicare la formattazione poco alla volta è davvero una necessità.\nInfine, poiché è meglio non doversi preoccupare ogni volta che si tocca il codice di formattarlo, è meglio avere un’attivazione automatica della formattazione.\nPoi è necessario creare lo strumento software che legga il codice, applichi le regole, e fare in modo che si esegua ad ogni build.\nVolete sapere come abbiamo fatto tutte queste cose nella nostra applicazione Happraisal?\nAbbiamo scelto una soluzione già pronta. Nel mondo open source ne esistono alcune. Noi abbiamo scelto Spotless perché oltre a permetterci di analizzare il codice e di formattarlo, è anche multilinguaggio. Spotless non si limita a Java ma gestisce anche C, JavaScript, TypeScript, yaml, JSON, SQL ed altri.\nIl repository di Spotless è su GitHub: https://github.com/diffplug/spotless Spotless è integrabile nei build basati su Maven e Gradle tramite plugin.\nPer usare Spotless in Happraisal abbiamo importato un plugin in Gradle e più in basso abbiamo incluso un file di configurazione tramite il comando apply:\nbuild.gradle\n1plugins { 2 // other plugins 3 id \u0026#34;com.diffplug.spotless\u0026#34; version \u0026#34;6.2.1\u0026#34; 4} 5 6// Include the configuration for Spotless 7apply from: \u0026#34;gradle / spotless.gradle\u0026#34; Il nostro file gradle/spotless.gradle consiste in tre parti. La prima è ratchetFrom che se specificato permette di applicare la formattazione incrementalmente ai soli file modificati rispetto al branch specificato che nel caso di Happraisal a origin/develop perché questo è il branch verso il quale confluiscono le merge requests. In pratica, ogni volta che si aggiunge codice a origin/develop, Spotless ci costringe a non peggiorare la situazione. Il parametro specificato in ratchetFrom può essere qualcosa di più complicato, per saperne di più potete consultare questo file: https://javadoc.io/static/org.eclipse.jgit/org.eclipse.jgit/5.6.1.202002131546-r/org/eclipse/jgit/lib/Repository.html#resolve-java.lang.String- Nota linguistica: la parola ratchet in inglese significa che la regola può essere più stringente (o rimanere invariata) ma non può diventare meno stringente.\nLa seconda sezione chiamata “misc” permette di specificare delle regole di formattazione per i file individuabili tramite l’estensione gradle oppure md.\nLa terza sezione è dedicata a Java. Nella sezione Java è presente un richiamo a googleJavaFormat che è un’applicazione dedicata esclusivamente alla formattazione di codice Java.\nGoogle Java Format lo trovate su GitHub: https://github.com/google/google-java-format e nei tag trovate tutte le versioni pubblicate (per esempio 1.13).\nSe non vi piace lo stile di formattazione imposto da Google e volete orientarvi su uno stile configurabile allora dovete passare a un formattatore Eclipse. Vi rimando al sito di Spotless per ulteriori approfondimenti.\nÈ da notare che Spotless permette anche di gestire le intestazioni per le licenze software tramite il comando licenseHeader.\n1spotless { 2// optional: limit format enforcement to just the files changed by this feature branch 3ratchet From \u0026#39;origin / develop\u0026#39; 4 5 format \u0026#39;misc\u0026#39;, { 6 // define the files to apply `misc` to 7 target \u0026#39;* .gradle\u0026#39;, \u0026#39;* .md \u0026#39;,\u0026#39; .gitignore \u0026#39; 8 9 // define the steps to apply to those files 10 trimTrailingWhitespace () 11 indentWithSpaces () // tab or spaces. indentWithSpaces takes an integer argument, the default value is 4 12 endWithNewline () 13 } 14 15 java { 16 // don\u0026#39;t need to set target, it is inferred from Java 17 18 // apply a specific flavor of google-java-format 19 googleJavaFormat (\u0026#39;1.13. 0 \u0026#39;). ReflowLongStrings () 20 // make sure every file has the following copyright header. 21 // optionally, Spotless can set copyright years by digging 22 // through git history. 23 licenseHeader \u0026#39;/ * (C) $ YEAR * /\u0026#39; 24 } 25} Riassunto Applicare rigide regole alla formattazione del codice riduce la fatica e lo stress degli sviluppatori e ne aumenta la produttività. Sarebbe meglio condividere a livello di squadra uno stile di formattazione ma se non ci si arriva per consenso, vale la pena di imporre uno stile, purché coerente, perché dopo un po’ le persone ci fanno l’abitudine. Una volta deciso uno stile, è bene avere uno strumento automatico per verificare che la formattazione sia coerente. Avere uno strumento per applicare la formattazione automaticamente permette di risparmiare tempo e di eliminare un compito meccanico. Spotless è uno strumento open source integrabile tramite plugin con Maven e Gradle. Spotless permette di formattare il codice in maniera graduale in modo da non dovere fare un mega commit al momento della sua introduzione.\nSe state leggendo questa frase è perché avete letto tutto l’articolo. Vi ringrazio perché questo è il mio primo articolo. Se avete commenti sul contenuto o sul formato, potete lasciare un commento…\nÈ condividendo le idee che si progredisce.\n Autore: Daniele Cremonini Revisore: Emmanuel Quinton ","date":"12/10/2022","img":"","permalink":"/it/posts/cosa-e-la-formattazione-del-codice-e-perch%C3%A9-e-importante/","series":["Strumenti per Java"],"tags":[""],"title":"Cos’è La Formattazione Del Codice E Perché È Importante?"},{"categories":[""],"content":"Vi è mai capitato di bloccarvi mentre scrivete un pezzo di codice particolarmente complicato e di capire cosa non andava nel momento esatto in cui chiedevate aiuto ad un collega?\nSpiegate il vostro codice ad un’anatra (se è di gomma, resterà sempre a portata di mano sulla vostra scrivania) e le vostre idee si chariranno velocemente.\nPuò sembrare strano ma se invece di leggere il codice a ripetizione, lo raccontate a qualcuno, il vostro cervello spesso svela il mistero. L’idea di spiegare il codice ad un anatra di gomma è stata resa popolare dal libro “The Pragmatic Programmer”. Il metodo funziona. Questo spiega il logo.\nMa cos’è che ci ha spinti a creare un sito che vi incita a parlare ad un’anatra? Abbiamo fatto diverse constatazioni:\n Capitiamo spesso su codice non aggiornato rispetto all’articolo che lo spiega In molti casi i progetti associati agli articoli sono sprovvisti di test. La qualità del codice è un argomento poco conosciuto oppure trascurato a favore di differenti fattori che quasi mai sono giustificabili in termini razionali.  L’idea principale di questo sito è quindi quella di presentare degli articoli e delle metodologie cui saranno associati dei progetti con la stessa qualità che ci è richiesta nel nostro lavoro e di mantenerli aggiornati.\nPer estensione, l’idea è anche quella di presentare degli articoli riguardo il nostro mestiere di sviluppatori e magari anche di presentare dei libri che ci sono particolarmente piaciuti.\nGli argomenti riflettono unicamente le nostre opinioni e il nostro modo di fare ma si tratta sempre del nostro punto di vista e siamo ben disposti a cambiarli perché per progredire bisogna sapere ascoltare e capire l’opinione degli altri ed accettare che esistono diversi modi di fare.\n","date":"13/01/2022","img":"","permalink":"/it/about/","series":[""],"tags":[""],"title":"About"},{"categories":null,"content":"render = never\n+++ title = \u0026ldquo;Contattaci\u0026rdquo; layout = \u0026ldquo;contact\u0026rdquo; [menu.footer] parent = \u0026ldquo;support\u0026rdquo; weight = 6 pre = \u0026lsquo;\u0026rsquo; +++\n","date":"01/01/0001","img":"","permalink":"/it/contact/","series":null,"tags":null,"title":""},{"categories":null,"content":"","date":"01/01/0001","img":"","permalink":"/it/offline/","series":null,"tags":null,"title":"Fuori Linea"}]