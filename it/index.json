[{"categories":["API"],"content":"Questo è il primo articolo sulle API in genere e più specificatamente sulle API HTTP e lo standard Open API.\nInizierò creando una base comune su cosa sia un\u0026rsquo;API generica e perché sia importante. Poiché un\u0026rsquo;API è un artefatto complesso, è importante mostrare le sue caratteristiche più importanti.\nSuccessivamente, mi concentrerò sulle API HTTP e su come rappresentarle poi spiegherò perché anziché creare il proprio modo di documentare un\u0026rsquo;API, conviene utilizzare un modo standard per rappresentare le API HTTP. In questo articolo tratto Open API.\nIntroduzione Questo è il primo articolo sulle API in genere e più specificatamente sulle API HTTP e lo standard Open API.\nInizierò creando una base comune su cosa sia un\u0026rsquo;API generica e perché sia importante. Poiché un\u0026rsquo;API è un artefatto complesso, è importante mostrare le sue caratteristiche più importanti.\nSuccessivamente, mi concentrerò sulle API HTTP e su come rappresentarle poi spiegherò perché anziché creare il proprio modo di documentare un\u0026rsquo;API, conviene utilizzare un modo standard per rappresentare le API HTTP. In questo articolo tratto Open API.\nConcetti di base Per rendere possibile la comunicazione tra due componenti software distinti, è necessario definire chiaramente come deve avvenire il dialogo.\nUn servizio è un programma software che mette a disposizione le proprie funzionalità attraverso un\u0026rsquo;interfaccia tecnica che deve essere pubblica (o almeno nota a tutti gli interlocutori), chiamata contratto di servizio.\nUn contratto di servizio può essere suddiviso in un insieme di capacità di servizio. Ogni capacità di servizio è una funzione offerta ad altri programmi software chiamati consumatori di servizi.\nQualsiasi software che utilizza un servizio è chiamato consumatore di servizi. Inoltre, il lato server è chiamato produttore.\nI componenti possono essere distribuiti nello stesso processo o in processi diversi. Se si trovano in processi diversi, l\u0026rsquo;esecuzione può avvenire sulla stessa macchina o su macchine separate.\nLe API cui siamo interessati sono quelle per componenti in esecuzione in processi separati su macchine separate. Il nostro caso di interesse è l\u0026rsquo;elaborazione distribuita.\nCosa significa API? API è l\u0026rsquo;acronimo di Application Programming Interface.\nNon esiste una definizione ufficiale di API. Tuttavia, su Internet possiamo trovarne molte. Alcune importanti aziende software forniscono la definizione di API nei propri termini.\nAmazon Web Services: _le API sono meccanismi che consentono a due componenti software di comunicare tra loro utilizzando un insieme di definizioni e protocolli.\nIBM: _Un API, o interfaccia di programmazione delle applicazioni, è un insieme di regole definite che consentono a diverse applicazioni di comunicare tra loro.\nMulesoft: _Un API è un intermediario software che consente a due applicazioni di comunicare tra loro.\nRedhat: _Un API è un insieme di definizioni e protocolli per la creazione e l\u0026rsquo;integrazione di software applicativo. Tutte le definizioni concordano sulla comunicazione tra due pezzi di software e, affinché la comunicazione diventi realtà, i computer hanno bisogno di un protocollo, che è un insieme di regole ben definite. Due applicazioni che vogliono comunicare devono stabilire un linguaggio comune. Aderire a un API è la stessa cosa che firmare un contratto: più chiara è la definizione, meglio è.\nOggi, le API più popolari sono REST e SOAP, ma potresti essere interessato anche alla potenza di GraphQL.\nSe ti occupi di architetture basate su eventi (EDA = Event Driven Architecture), dovresti dare un\u0026rsquo;occhiata ad AsyncAPI. AsyncAPI è un\u0026rsquo;iniziativa open source che mira a rendere il lavoro con le EDA facile quanto Open API fa con le API REST.\nPerché dovremmo interessarci alle API? Le API consentono a molteplici di dialogare. Nei sistemi distribuiti, le API ben definite sono fondamentali per semplificare le interconnessioni dei servizi. Le applicazioni che dialogano con altre applicazioni sono la norma oggi. Inoltre, la grande maggioranza di tutte le applicazioni monolitiche non funziona in modo autonomo. Ad esempio, una piccola applicazione web che deve autenticare gli utenti, la maggior parte delle volte lo fa tramite un servizio chiamato Identity Provider, e tale componente espone un\u0026rsquo;API.\nUna volta stabilita questa API, sia il produttore che il consumatore possono essere implementati in qualsiasi linguaggio e in modo indipendente l\u0026rsquo;uno dall\u0026rsquo;altro.\nCaratteristiche di un\u0026rsquo;API In nessun ordine particolare, un\u0026rsquo;API dovrebbe essere:\nSicura - la sicurezza è la caratteristica principale che un\u0026rsquo;API deve presentare. Un\u0026rsquo;API consente la lettura e/o la modifica dei dati. È di fondamentale importanza che solo persone o sistemi autorizzati possano farlo. Un\u0026rsquo;API deve garantire che i dati in transito non possano essere letti da terze parti. L\u0026rsquo;uso di autenticazione, autorizzazione e crittografia sono fondamentali per proteggere le API da accessi indesiderati.\nSenza stato - ogni richiesta deve contenere tutte le informazioni necessarie per essere compresa dal server. Si dice che il server è senza stato quando il server non deve memorizza alcun dettaglio sulla sessione del client. Di conseguenza il client non può presumere che una richiesta dipenda da una richiesta precedente. Il comportamento è simile a quello di una funzione rispetto a un oggetto: una funzione chiamata con lo stesso insieme di argomenti verrà eseguita sempre con lo stesso risultato. Un oggetto, al contrario, può eseguire la stessa cosa ogni volta. Attenzione: quando si parla di un sistema senza stato, in effetti il sistema ha uno stato ma questo invece di trovarsi nel processo dell\u0026rsquo;API è in una base dati.\nRobusta - un\u0026rsquo;API può essere potenzialmente utilizzata da molti utenti contemporaneamente. Le prestazioni non dovrebbero variare troppo con diverse carichi di lavoro.\nBen documentata - un\u0026rsquo;API può essere (e generalmente lo è) un artefatto complesso. Il suo utilizzo dovrebbe essere il più semplice possibile e gli sviluppatori dovrebbero essere in grado di capire come usarla semplicemente leggendo la documentazione. Inoltre, gli errori e il loro significato dovrebbero essere ben documentati.\nResiliente - inevitabilmente gli errori si verificano e quando un errore si presenta nel backend, il problema dovrebbe essere spiegato chiaramente al chiamante, con messaggi di errore ben codificati in modo che, se l\u0026rsquo;errore è del chiamante, questi possa correggere la chiamata e riprovare.\nInteroperabile - un\u0026rsquo;API dovrebbe facilitare la comunicazione tra due sistemi eterogenei. Ciò comporta che il protocollo di comunicazione e la codifica dovrebbero essere chiaramente definiti anche per applicazioni eseguite su sistemi operativi diversi (per esempio Windows e Linux).\nRintracciabile - in un\u0026rsquo;organizzazione possono essere presenti molte API. Se un\u0026rsquo;API non può essere trovata, essa non esiste. Per questo motivo, l\u0026rsquo;organizzazione potrebbe iniziare a creare una nuova API (per trovare tracce, lungo il percorso, di quella esistente) o addirittura abbandonare il progetto.\nCoerente - i punti di accesso di un\u0026rsquo;API dovrebbero seguire schemi simili. Ad esempio, la logica per leggere un elenco di clienti non dovrebbe essere diversa dalla logica per leggere un elenco di articoli.\nCome rappresentare un\u0026rsquo;API? Niente impedisce di creare il proprio formato di API, ma farlo complicherebbe l\u0026rsquo;interconnessione dei sistemi. La comunicazione tra sistemi è più difficile se i sistemi sono eterogenei perché la trasmissione di parametri di ingresso e uscita richiede conversioni di modelli e codifiche/decodifiche di dati. Esiste un gran numero di possibili rappresentazioni di un\u0026rsquo;API. Esprimere in modo chiaro tutti gli aspetti di un\u0026rsquo;API richiede un formalismo ben definito e crearlo è sicuramente una sfida. Pertanto, prima di intraprendere la creazione di un linguaggio per rappresentare un\u0026rsquo;API, è meglio verificare se esiste uno standard.\nPer le API HTTP esiste uno standard di fatto, chiamato Specifica OpenAPI.\nCos\u0026rsquo;è la Specifica OpenAPI? Tradotto dal sito ufficiale:\n\u0026ldquo;La Specifica OpenAPI (OAS) definisce un\u0026rsquo;interfaccia standard, indipendente dal linguaggio, per le API HTTP che consente sia agli esseri umani sia ai computer di scoprire e comprendere le capacità del servizio senza accesso al codice sorgente, alla documentazione o all\u0026rsquo;ispezione del traffico di rete.\u0026rdquo;\nSi noti che OpenAPI si riferisce alle API HTTP in generale di cui le API REST sono un sottoinsieme.\nLa Specifica OpenAPI non si limita a rappresentare un\u0026rsquo;API HTTP, ma ha anche un ecosistema ben consolidato. Si possono utilizzare numerosi strumenti software per tradurre una definizione OpenAPI in documentazione consultabile, per generare codice per il lato client e il lato server in molti linguaggi di programmazione. Si possono generare anche test automatici.\nA seconda delle esigenze funzionali che si affrontano e dell\u0026rsquo;ambiente tecnico in cui si sta lavorando, si hanno diverse scelte di standard API. Alcuni dei protocolli API più utilizzati oggi, oltre a REST, sono SOAP e MQTT. OpenAPI copre le API HTTP in generale e include anche il supporto per le API REST. OpenAPI non è l\u0026rsquo;unico modo per modellare le API HTTP, RAML e API Blueprint sono alternative possibili.\nConclusione In questo articolo introduttivo, ho delineato alcuni concetti di base sulla comunicazione tra componenti software. Per rendere possibile tale comunicazione, è necessario creare una API. Una buona API dovrebbe presentare alcune caratteristiche come la sicurezza, l\u0026rsquo;interoperabilità e la coerenza. Dopo questa sezione concettuale, ho introdotto il problema di come rappresentare una API e ho suggerito che per le API HTTP, uno standard come OpenAPI è una buona scelta. Esistono anche RAML e API Blueprint, ma sono meno conosciuti.\nNel prossimo articolo, approfondirò OpenAPI.\nSe hai commenti sul contenuto o sulla forma, puoi lasciare un commento\u0026hellip; è scambiando informazioni che facciamo progressi.\nAutore: Daniele Cremonini Revisore: Emmanuel Quinton\n","date":"01/11/2023","img":"","permalink":"/it/posts/cosa-e-una-api/","series":["Lavorare con le API"],"tags":[""],"title":"Introduzione Alle API"},{"categories":[""],"content":"Può uno strumento di formattazione automatica aumentare la produttività?\nLa risposta è sì.\nNel libro “The Pragmatic Programmer” si parla di entropia del codice. L’entropia è una grandezza fisica legata al disordine molecolare. Questa è forse l\u0026rsquo;unica grandezza fisica che possiamo ritrovare nel software. Più è grande il disordine, più è elevata l\u0026rsquo;entropia. Più il vostro software è entropico, più fatica farete a lavorarci giorno dopo giorno.\nPer spiegare perché, vi farò un esempio.\nQuando si scrive un if-then-else in un linguaggio come Java dove è meglio mettere le parentesi?\nPotrete dire come a), b) oppure c) oppure potrete inventare un’altra combinazione intermedia di vostro gusto.\na)\n1if (condition) { 2 // your \u0026#34;then\u0026#34; code here 3} else { 4 // your \u0026#34;else\u0026#34; code here 5} b)\n1if (condition) 2{ 3 // your \u0026#34;then\u0026#34; code here 4} 5else 6{ 7 // your \u0026#34;else\u0026#34; code here 8} c)\n1if (condition) { 2 // your \u0026#34;then\u0026#34; code here 3} 4else { 5 // your \u0026#34;else\u0026#34; code here 6} I modi di formattare il codice sono numerosissimi: dove mettere l’apertura della parentesi graffa, se usare il TAB o lo spazio per indentare, se aggiungere uno spazio dopo l’apertura di una parentesi tonda, dove porre i commenti. Anche la scrittura delle condizioni logiche può essere fatta in molti modi:\n1(a==b) oppure\n1(a == b) oppure\n1( a == b ) I have witnessed several heated discussions on which style is \u0026ldquo;better\u0026rdquo; but beyond what can come out of them, what really matters most is consistency. Why? Because, depending on how much a person may not like a certain style, after a while they will adjust to it, and the reading of the code will become automatic. The code becomes more intuitive. If the formatting of the code is inconsistent, reading the code becomes more strenuous. Fatigue increases the likelihood of making mistakes. It will take time to find these errors and more time to correct them. Ultimately, not formatting your code consistently results in a decline in productivity.\nHo assistito a varie discussioni accese su quale stile sia “meglio” ma aldilà di quello che può uscirne, quello che conta di più in realtà è la coerenza. Perché? Perché per quanto ad una persona possa non piacere un certo stile, dopo un po’ finisce per abituarcisi e quando ci ha fatto l’abitudine, la lettura del codice diventa automatica. Il codice diventa più intuitivo. Se la formattazione del codice è incoerente, la lettura del codice diviene più faticosa. Con la stanchezza aumenta la probabilità di commettere errori. Ci vorrà tempo per trovare questi errori e altro tempo per correggerli. In definitiva, non formattare il codice in maniera coerente comporta un calo della produttività.\nMantenere il codice formattato coerentemente può essere una sfida anche per un singolo sviluppatore ma in una squadra, potete essere certi che la coerenza non durerà. Gli sviluppatori lavorano quasi sempre in squadra. Per una squadra, avere una regola condivisa significa aumentare la produttività globale. Create un consenso attorno ad uno stile di formattazione del codice e se non ci riuscite, imponetelo. Anche se all’inizio incontrerete un po’ di resistenza, i vostri colleghi si abitueranno, si stancheranno meno e saranno più produttivi.\nLa coerenza e l’ordine che ne deriva sono ancora più importanti dello stile della formattazione stessa.\nSe abbiamo a disposizione uno strumento che non solo verifica che le regole siano rispettate ma in più formatta il codice automaticamente, otteniamo un secondo grande vantaggio che è quello di risparmiare tempo e stress per applicare la formattazione.\nLa definizione di uno stile di formattazione per un linguaggio con una sintassi mediamente complessa come quella di Java può richiedere decine di regole e per quanto detto sopra, è bene che tali regole siano coerenti nei diversi casi che si possono presentare.\nCosa succede se si decide di applicare delle regole di formattazione ad un progetto che è composto da parecchi file? Bisogna formattare tutti i file in un colpo solo o è meglio procedere gradualmente trattando solo qualche file alla volta?\nSe un progetto ha uno storico di qualche giorno, formattare tutti i file in un colpo solo non ha un grosso impatto sulla tracciabilità delle modifiche nel log del sistema di gestione dei sorgenti (git per esempio) ma se i file sono centinaia con più sviluppatori che lavorano e magari in modalità asincrona (come avviene solitamente su un progetto open source) applicare la formattazione poco alla volta è davvero una necessità.\nInfine, poiché è meglio non doversi preoccupare ogni volta che si tocca il codice di formattarlo, è meglio avere un’attivazione automatica della formattazione.\nPoi è necessario creare lo strumento software che legga il codice, applichi le regole, e fare in modo che si esegua ad ogni build.\nVolete sapere come abbiamo fatto tutte queste cose nella nostra applicazione Happraisal?\nAbbiamo scelto una soluzione già pronta. Nel mondo open source ne esistono alcune. Noi abbiamo scelto Spotless perché oltre a permetterci di analizzare il codice e di formattarlo, è anche multilinguaggio. Spotless non si limita a Java ma gestisce anche C, JavaScript, TypeScript, yaml, JSON, SQL ed altri.\nIl repository di Spotless è su GitHub: https://github.com/diffplug/spotless Spotless è integrabile nei build basati su Maven e Gradle tramite plugin.\nPer usare Spotless in Happraisal abbiamo importato un plugin in Gradle e più in basso abbiamo incluso un file di configurazione tramite il comando apply:\nbuild.gradle\n1plugins { 2 // other plugins 3 id \u0026#34;com.diffplug.spotless\u0026#34; version \u0026#34;6.2.1\u0026#34; 4} 5 6// Include the configuration for Spotless 7apply from: \u0026#34;gradle / spotless.gradle\u0026#34; Il nostro file gradle/spotless.gradle consiste in tre parti. La prima è ratchetFrom che se specificato permette di applicare la formattazione incrementalmente ai soli file modificati rispetto al branch specificato che nel caso di Happraisal a origin/develop perché questo è il branch verso il quale confluiscono le merge requests. In pratica, ogni volta che si aggiunge codice a origin/develop, Spotless ci costringe a non peggiorare la situazione. Il parametro specificato in ratchetFrom può essere qualcosa di più complicato, per saperne di più potete consultare questo file: https://javadoc.io/static/org.eclipse.jgit/org.eclipse.jgit/5.6.1.202002131546-r/org/eclipse/jgit/lib/Repository.html#resolve-java.lang.String- Nota linguistica: la parola ratchet in inglese significa che la regola può essere più stringente (o rimanere invariata) ma non può diventare meno stringente.\nLa seconda sezione chiamata “misc” permette di specificare delle regole di formattazione per i file individuabili tramite l’estensione gradle oppure md.\nLa terza sezione è dedicata a Java. Nella sezione Java è presente un richiamo a googleJavaFormat che è un’applicazione dedicata esclusivamente alla formattazione di codice Java.\nGoogle Java Format lo trovate su GitHub: https://github.com/google/google-java-format e nei tag trovate tutte le versioni pubblicate (per esempio 1.13).\nSe non vi piace lo stile di formattazione imposto da Google e volete orientarvi su uno stile configurabile allora dovete passare a un formattatore Eclipse. Vi rimando al sito di Spotless per ulteriori approfondimenti.\nÈ da notare che Spotless permette anche di gestire le intestazioni per le licenze software tramite il comando licenseHeader.\n1spotless { 2// optional: limit format enforcement to just the files changed by this feature branch 3ratchet From \u0026#39;origin / develop\u0026#39; 4 5 format \u0026#39;misc\u0026#39;, { 6 // define the files to apply `misc` to 7 target \u0026#39;* .gradle\u0026#39;, \u0026#39;* .md \u0026#39;,\u0026#39; .gitignore \u0026#39; 8 9 // define the steps to apply to those files 10 trimTrailingWhitespace () 11 indentWithSpaces () // tab or spaces. indentWithSpaces takes an integer argument, the default value is 4 12 endWithNewline () 13 } 14 15 java { 16 // don\u0026#39;t need to set target, it is inferred from Java 17 18 // apply a specific flavor of google-java-format 19 googleJavaFormat (\u0026#39;1.13. 0 \u0026#39;). ReflowLongStrings () 20 // make sure every file has the following copyright header. 21 // optionally, Spotless can set copyright years by digging 22 // through git history. 23 licenseHeader \u0026#39;/ * (C) $ YEAR * /\u0026#39; 24 } 25} Riassunto Applicare rigide regole alla formattazione del codice riduce la fatica e lo stress degli sviluppatori e ne aumenta la produttività. Sarebbe meglio condividere a livello di squadra uno stile di formattazione ma se non ci si arriva per consenso, vale la pena di imporre uno stile, purché coerente, perché dopo un po’ le persone ci fanno l’abitudine. Una volta deciso uno stile, è bene avere uno strumento automatico per verificare che la formattazione sia coerente. Avere uno strumento per applicare la formattazione automaticamente permette di risparmiare tempo e di eliminare un compito meccanico. Spotless è uno strumento open source integrabile tramite plugin con Maven e Gradle. Spotless permette di formattare il codice in maniera graduale in modo da non dovere fare un mega commit al momento della sua introduzione.\nSe state leggendo questa frase è perché avete letto tutto l’articolo. Vi ringrazio perché questo è il mio primo articolo. Se avete commenti sul contenuto o sul formato, potete lasciare un commento…\nÈ condividendo le idee che si progredisce.\n Autore: Daniele Cremonini Revisore: Emmanuel Quinton ","date":"16/01/2023","img":"","permalink":"/it/posts/cosa-e-la-formattazione-del-codice-e-perche-e-importante/","series":["Strumenti per Java"],"tags":[""],"title":"Cos’è La Formattazione Del Codice E Perché È Importante?"},{"categories":null,"content":"","date":"01/07/2022","img":"","permalink":"/it/offline/","series":null,"tags":null,"title":"Fuori Linea"},{"categories":[""],"content":"Vi è mai capitato di bloccarvi mentre scrivete un pezzo di codice particolarmente complicato e di capire cosa non andava nel momento esatto in cui chiedevate aiuto ad un collega?\nSpiegate il vostro codice ad un’anatra (se è di gomma, resterà sempre a portata di mano sulla vostra scrivania) e le vostre idee si chariranno velocemente.\nPuò sembrare strano ma se invece di leggere il codice a ripetizione, lo raccontate a qualcuno, il vostro cervello spesso svela il mistero. L’idea di spiegare il codice ad un anatra di gomma è stata resa popolare dal libro “The Pragmatic Programmer”. Il metodo funziona. Questo spiega il logo.\nMa cos’è che ci ha spinti a creare un sito che vi incita a parlare ad un’anatra? Abbiamo fatto diverse constatazioni:\n Capitiamo spesso su codice non aggiornato rispetto all’articolo che lo spiega In molti casi i progetti associati agli articoli sono sprovvisti di test. La qualità del codice è un argomento poco conosciuto oppure trascurato a favore di differenti fattori che quasi mai sono giustificabili in termini razionali.  L’idea principale di questo sito è quindi quella di presentare degli articoli e delle metodologie cui saranno associati dei progetti con la stessa qualità che ci è richiesta nel nostro lavoro e di mantenerli aggiornati.\nPer estensione, l’idea è anche quella di presentare degli articoli riguardo il nostro mestiere di sviluppatori e magari anche di presentare dei libri che ci sono particolarmente piaciuti.\nGli argomenti riflettono unicamente le nostre opinioni e il nostro modo di fare ma si tratta sempre del nostro punto di vista e siamo ben disposti a cambiarli perché per progredire bisogna sapere ascoltare e capire l’opinione degli altri ed accettare che esistono diversi modi di fare.\n","date":"08/05/2022","img":"","permalink":"/it/about/","series":[""],"tags":[""],"title":"About"},{"categories":null,"content":"render = never\n+++ title = \u0026ldquo;Contattaci\u0026rdquo; layout = \u0026ldquo;contact\u0026rdquo; [menu.footer] parent = \u0026ldquo;support\u0026rdquo; weight = 6 pre = \u0026lsquo;\u0026rsquo; +++\n","date":"01/01/0001","img":"","permalink":"/it/contact/","series":null,"tags":null,"title":""}]